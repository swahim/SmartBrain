{"version":3,"sources":["components/imageLinkForm.js","components/brain.png","components/logo.js","components/navigation.js","components/rank.js","components/displayImage.js","components/displayColors.js","components/signIn/signIn.js","components/register/register.js","App.js","reportWebVitals.js","index.js"],"names":["ImageLinkForm","input","setInput","handleSubmit","className","id","type","onInput","e","target","value","onClick","Logo","options","max","style","height","width","alt","src","brain","Navigation","routeChangeSignIn","Rank","entries","displayName","FaceRecognition","imgUrl","DisplayColors","SignIn","routeChange","setId","setEntries","setDisplayName","useState","email","setEmail","password","setPassword","userBody","onChange","event","placeholder","htmlFor","fetch","method","headers","body","JSON","stringify","then","data","text","result","array","parse","message","response","name","Register","setName","userData","app","Clarifai","App","apiKey","setImageUrl","displayDiv","document","querySelector","route","setRoute","idBody","preventDefault","models","predict","COLOR_MODEL","datain","outputs","colors","innerHTML","forEach","Element","copyColor","createElement","classList","add","raw_hex","appendChild","color","background","catch","err","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.af9386c5.chunk.js","sourcesContent":["\nconst ImageLinkForm = ({input, setInput, handleSubmit}) => {\n    \n    return (\n        <div className=\"form\">\n            <p id=\"description\">\n                {\"This magic Brain will detect colors in the picture. Give it a try\"}\n            </p>\n            <p id=\"info\">\n                {\"Input any jpg image link for example 'https://watchandlearn.scholastic.com/content/dam/classroom-magazines/watchandlearn/videos/animals-and-plants/plants/what-are-plants-/What-Are-Plants.jpg'\"}\n            </p>\n            <form>\n                <input className=\"input\" type=\"text\"\n                    onInput = {(e) => setInput(e.target.value)}\n                ></input>\n                <button id=\"detect\" onClick={handleSubmit}>Detect</button>\n            </form>\n            \n        </div>\n    );\n}\n \nexport default ImageLinkForm;","export default __webpack_public_path__ + \"static/media/brain.55764925.png\";","import Tilt from 'react-tilt'\nimport brain from './brain.png'\nconst Logo = () => {\n    return (\n        <div className=\"logo\">\n            <Tilt className=\"Tilt\" options={{ max : 55 }} style={{ height: 150, width: 150 }} >\n            <div className=\"Tilt-inner\"><img alt=\"logo\" className=\"image\" src={brain}></img></div>\n            </Tilt>\n        </div>\n    );\n}\n \nexport default Logo;","const Navigation = ({routeChangeSignIn}) => {\n    return (\n        <header>\n        <nav className=\"topBar\">\n            <button className=\"signOutButton\" onClick={() => routeChangeSignIn('signin')}>Sign Out</button>\n        </nav>\n        </header>\n    );\n}\n \nexport default Navigation;","const Rank = ({entries, displayName}) => {\n    return (\n        <div className=\"rank\">\n            <div className=\"text\">{`${displayName}, your current entries are : `}</div>\n            <div className=\"rankNumber\">{`#${entries}`}</div>\n        </div>\n    );\n}\n \nexport default Rank;","const FaceRecognition = ({imgUrl}) => {\n    return (\n        <div className=\"displayImage\">\n            <img id=\"inputImage\" src={imgUrl}></img>\n        </div>\n    );\n}\n \nexport default FaceRecognition;","const DisplayColors = () => {\n    return (\n        <div className=\"displayColors\">\n            {/* <div className=\"copyColor\">\n            <div className=\"color color1\" style={{backgroundColor : \"#a85e32\"}}></div>\n            <div className=\"displayValue\">#008000</div>\n           \n            </div>\n            <div className=\"copyColor\">\n            <div className=\"color color2\"></div>\n            <div className=\"displayValue\">#008000</div>\n            </div>\n            <div className=\"copyColor\">\n            <div className=\"color color3\"></div>\n            <div className=\"displayValue\">#008000</div>\n            </div> */}\n            \n        </div>\n    );\n}\n \nexport default DisplayColors;","import { useState } from \"react\";\nconst url = 'https://calm-bastion-00688.herokuapp.com';\nconst SignIn = ({routeChange, setId, setEntries, setDisplayName}) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  \n  const emailChange = (event) => {\n    setEmail(event.target.value);\n  }\n  const passwordChange = (event) => {\n    setPassword(event.target.value);\n  }\n  const userBody = {\n    email,\n    password\n  }\n  const onSubmit = () => {\n      fetch(`${url}/auth/signin`, {\n        method: 'POST',\n        headers : {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n        body : JSON.stringify(userBody) \n      }).then(data => {\n        return data.text()\n      })\n      .then(result => {\n        const array = JSON.parse(result);\n        if(array.message === \"User signed in successfully\"){\n            setId(array.response.id)\n            setEntries(array.response.entries);\n            setDisplayName(array.response.name);\n            routeChange(\"home\");\n            \n        } \n      })\n    }\n    \n\n   \n    return (\n      <div className=\"card\">\n        <div className=\"container\">\n          <h2>Sign In</h2>\n          <input onChange={emailChange} type=\"text\" className=\"email signinEmail\" placeholder=\"Email\"></input>\n          <label htmlFor=\"email\">Email</label>\n          <input onChange={passwordChange} type=\"password\" className=\"password signinPassword\" placeholder=\"Password\"></input>\n          <label htmlFor=\"password\">Password</label>\n          <button id=\"submit\" onClick={onSubmit} type=\"submit\">Sign In</button>\n          <a onClick={() => routeChange('register')} className=\"registerLink\">Register</a>\n          \n        </div>\n      </div>\n    )\n}\n \nexport default SignIn;","import { useState } from \"react\";\nconst url = 'https://calm-bastion-00688.herokuapp.com';\n\nconst Register = ({routeChange, setId, setEntries, setDisplayName}) => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  // const mailformat = /^w+([.-]?w+)*@w+([.-]?w+)*(.w{2,3})+$/;\n  const nameChange = (event) => {\n      setName(event.target.value);\n  }\n  const emailChange = (event) => {\n      setEmail(event.target.value);\n      \n  }\n  const passwordChange = (event) => {\n      setPassword(event.target.value);\n  }\n  const userData = {\n    name,\n    email,\n    password\n  }\n  \n  const onSubmit = () => {\n    if(name !== \"\" || email !== \"\" || password !== \"\"){\n      fetch(`${url}/auth/register`, {\n        method: 'POST',\n        headers : {\n          \"Content-Type\": \"application/json\"\n        },\n        body : JSON.stringify(userData)\n      }).then(data => {\n        return data.text();\n      }).then(result => {\n        const array = JSON.parse(result);\n        if(array.message === \"User added successfully\"){\n          setId(array.response.id)\n          setEntries(array.response.entries);\n          setDisplayName(array.response.name);\n          routeChange('home');\n        }\n      })\n\n    }\n  }\n\n    return (\n        <div className=\"card\">\n        <div className=\"container\">\n          <h2>Register</h2>\n          <input onChange={nameChange} type=\"text\" className=\"email\" placeholder=\"Name\"></input>\n          <label htmlFor=\"password\">Name</label>\n          <input onInput={emailChange} type=\"email\" className=\"email\" placeholder=\"Email\"></input>\n          <label htmlFor=\"email\">Email</label>\n          \n          <input onInput={passwordChange} type=\"password\" className=\"password\" placeholder=\"Password\"></input>\n          <label htmlFor=\"password\">Password</label>\n          <button id=\"submit\" onClick={onSubmit} type=\"submit\">Register</button>\n          \n        </div>\n      </div>\n    );\n}\n \nexport default Register;","\nimport {useState } from 'react';\nimport Clarifai from 'clarifai'\nimport ImageLinkForm from './components/imageLinkForm';\nimport Logo from './components/logo';\nimport Navigation from './components/navigation';\nimport Rank from './components/rank';\nimport FaceRecognition from './components/displayImage';\nimport DisplayColors from './components/displayColors';\nimport SignIn from './components/signIn/signIn';\nimport Register from './components/register/register';\n\n\n\nconst app = new Clarifai.App({\n  apiKey: '857608ae43c54ba1ae90c8025fa80a2a',\n});\n\nconst url = 'https://calm-bastion-00688.herokuapp.com';\n\nfunction App() {\n\n  const [input, setInput] = useState(\"\");\n  const [imgUrl, setImageUrl] = useState(\"\");\n  const [displayName, setDisplayName] = useState(\"\");\n  const displayDiv = document.querySelector(\".displayColors\");\n  const [route, setRoute] = useState(\"signin\")\n  const [id, setId] = useState();\n  const [entries, setEntries] = useState();\n  const idBody = {\n    id\n  }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // handleClick();\n        // console.log(input);\n        setImageUrl({input}.input)\n        // console.log(imgUrl);\n            app.models\n              .predict(Clarifai.COLOR_MODEL, input).then((datain) => {\n                if(datain){\n              \n                  fetch(`${url}/images`, {\n                    method : 'PUT',\n                    headers : {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    body : JSON.stringify(idBody)\n                  }).then((data) => {\n                    return data.text()\n                  }).then(result => {\n                    setEntries(result);\n                    \n                  })\n                }\n                // console.log(datain.outputs[0].data.colors);\n                const array = datain.outputs[0].data.colors;\n                displayDiv.innerHTML = \"\";\n                array.forEach(Element => {\n                    \n                    const copyColor = document.createElement(\"div\");\n                    copyColor.classList.add(\"copyColor\");\n                    copyColor.innerHTML = `<div class=\"color\"></div>\n                    <div class=\"displayValue\">${Element.raw_hex}</div>`\n                    displayDiv.appendChild(copyColor);\n                    const color = copyColor.querySelector(\".color\")\n                    // console.log(color);\n                    color.classList.add(\"color\");\n                    color.style.background = Element.raw_hex;\n                  \n                  })\n                }).catch((err) => {\n                    console.log(err);\n                })\n    }\n    const routeChange = (route) => {\n      setRoute(route);\n    }\n\n\n\n  return (\n    <div className=\"App\">\n      {route === 'home' \n        ?<div>\n         <Navigation routeChangeSignIn={routeChange}/>\n         <Logo />\n        <Rank entries={entries} displayName={displayName}/>\n        <ImageLinkForm  input={input} setInput={setInput} handleSubmit={handleSubmit}/>\n        <FaceRecognition imgUrl={imgUrl} />\n        <DisplayColors />\n      </div>\n\n      : (\n        route === 'signin' ? <SignIn routeChange={routeChange} setId={setId} setEntries={setEntries} setDisplayName={setDisplayName}/>\n        : <Register routeChange={routeChange} setId={setId} setEntries={setEntries} setDisplayName={setDisplayName}/>\n      )}\n\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './responsive.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}